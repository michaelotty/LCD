

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Apr 11 16:13:10 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x4E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  0081                     	;# 
    29  0085                     	;# 
    30  0086                     	;# 
    31  0088                     	;# 
    32  0089                     	;# 
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0008                     	;# 
    41  0009                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  0081                     	;# 
    45  0085                     	;# 
    46  0086                     	;# 
    47  0088                     	;# 
    48  0089                     	;# 
    49  0030                     _RB0	set	48
    50  0031                     _RB1	set	49
    51  0032                     _RB2	set	50
    52  0033                     _RB3	set	51
    53  0034                     _RB4	set	52
    54  0035                     _RB5	set	53
    55  0036                     _RB6	set	54
    56  0086                     _TRISB	set	134
    57                           
    58                           	psect	strings
    59  0001                     __pstrings:	
    60  0001                     stringtab:	
    61  0001                     __stringtab:	
    62                           
    63                           ;	String table - string pointers are 1 byte each
    64  0001  1BCF               	btfsc	btemp+1,7
    65  0002  280B               	ljmp	stringcode
    66  0003  1383               	bcf	3,7
    67  0004  184F               	btfsc	btemp+1,0
    68  0005  1783               	bsf	3,7
    69  0006  0800               	movf	0,w
    70  0007  0A84               	incf	4,f
    71  0008  1903               	skipnz
    72  0009  0ACF               	incf	btemp+1,f
    73  000A  0008               	return
    74  000B                     stringcode:	
    75  000B                     stringdir:	
    76  000B  3000               	movlw	high stringdir
    77  000C  008A               	movwf	10
    78  000D  0804               	movf	4,w
    79  000E  0A84               	incf	4,f
    80  000F  0782               	addwf	2,f
    81  0010                     __stringbase:	
    82  0010  3400               	retlw	0
    83  0011                     __end_of__stringtab:	
    84  0011                     STR_1:	
    85  0011  344D               	retlw	77	;'M'
    86  0012  3469               	retlw	105	;'i'
    87  0013  346B               	retlw	107	;'k'
    88  0014  3465               	retlw	101	;'e'
    89  0015  344C               	retlw	76	;'L'
    90  0016  3461               	retlw	97	;'a'
    91  0017  3475               	retlw	117	;'u'
    92  0018  3472               	retlw	114	;'r'
    93  0019  3400               	retlw	0
    94                           
    95                           ; #config settings
    96  0000                     
    97                           	psect	cinit
    98  03FE                     start_initialization:	
    99  03FE                     __initialization:	
   100  03FE                     end_of_initialization:	
   101                           ;End of C runtime variable initialization code
   102                           
   103  03FE                     __end_of__initialization:	
   104  03FE  0183               	clrf	3
   105  03FF  2B15               	ljmp	_main	;jump to C main() function
   106                           
   107                           	psect	cstackCOMMON
   108  0000                     __pcstackCOMMON:	
   109  0000                     ??_Lcd_Port:	
   110                           
   111                           	psect	cstackBANK0
   112  000C                     __pcstackBANK0:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  000C                     ?_Lcd_Init:	
   116  000C                     ?_Lcd_Clear:	
   117                           ; 0 bytes @ 0x0
   118                           
   119  000C                     ?_main:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  000C                     ?_Lcd_Port:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  000C                     ?_Lcd_Cmd:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  000C                     ?_Lcd_Write_Char:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  000C                     Lcd_Port@a:	
   132                           ; 0 bytes @ 0x0
   133                           
   134                           
   135                           ; 1 bytes @ 0x0
   136  000C                     	ds	1
   137  000D                     ??_Lcd_Cmd:	
   138  000D                     ??_Lcd_Write_Char:	
   139                           ; 0 bytes @ 0x1
   140                           
   141                           
   142                           ; 0 bytes @ 0x1
   143  000D                     	ds	1
   144  000E                     Lcd_Write_Char@temp:	
   145                           
   146                           ; 1 bytes @ 0x2
   147  000E                     	ds	1
   148  000F                     Lcd_Cmd@a:	
   149  000F                     Lcd_Write_Char@y:	
   150                           ; 1 bytes @ 0x3
   151                           
   152                           
   153                           ; 1 bytes @ 0x3
   154  000F                     	ds	1
   155  0010                     ??_Lcd_Init:	
   156  0010                     ??_Lcd_Clear:	
   157                           ; 0 bytes @ 0x4
   158                           
   159  0010                     ?_Lcd_Set_Cursor:	
   160                           ; 0 bytes @ 0x4
   161                           
   162  0010                     Lcd_Set_Cursor@b:	
   163                           ; 0 bytes @ 0x4
   164                           
   165  0010                     Lcd_Write_Char@a:	
   166                           ; 1 bytes @ 0x4
   167                           
   168                           
   169                           ; 1 bytes @ 0x4
   170  0010                     	ds	1
   171  0011                     ??_Lcd_Set_Cursor:	
   172  0011                     ?_Lcd_Write_String:	
   173                           ; 0 bytes @ 0x5
   174                           
   175  0011                     Lcd_Write_String@a:	
   176                           ; 0 bytes @ 0x5
   177                           
   178                           
   179                           ; 2 bytes @ 0x5
   180  0011                     	ds	2
   181  0013                     ??_Lcd_Write_String:	
   182  0013                     Lcd_Set_Cursor@a:	
   183                           ; 0 bytes @ 0x7
   184                           
   185                           
   186                           ; 1 bytes @ 0x7
   187  0013                     	ds	1
   188  0014                     Lcd_Set_Cursor@z:	
   189                           
   190                           ; 1 bytes @ 0x8
   191  0014                     	ds	1
   192  0015                     Lcd_Set_Cursor@y:	
   193                           
   194                           ; 1 bytes @ 0x9
   195  0015                     	ds	1
   196  0016                     Lcd_Set_Cursor@temp:	
   197  0016                     Lcd_Write_String@i:	
   198                           ; 1 bytes @ 0xA
   199                           
   200                           
   201                           ; 2 bytes @ 0xA
   202  0016                     	ds	2
   203  0018                     ??_main:	
   204                           
   205                           ; 0 bytes @ 0xC
   206  0018                     	ds	1
   207  0019                     main@name:	
   208                           
   209                           ; 1 bytes @ 0xD
   210  0019                     	ds	1
   211                           
   212                           	psect	maintext
   213  0315                     __pmaintext:	
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 12 in file "main.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  name            1   13[BANK0 ] PTR unsigned char 
   224 ;;		 -> STR_1(9), 
   225 ;; Return value:  Size  Location     Type
   226 ;;		None               void
   227 ;; Registers used:
   228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   229 ;; Tracked objects:
   230 ;;		On entry : B00/0
   231 ;;		On exit  : 0/0
   232 ;;		Unchanged: 0/0
   233 ;; Data sizes:     COMMON   BANK0
   234 ;;      Params:         0       0
   235 ;;      Locals:         0       1
   236 ;;      Temps:          0       1
   237 ;;      Totals:         0       2
   238 ;;Total ram usage:        2 bytes
   239 ;; Hardware stack levels required when called:    3
   240 ;; This function calls:
   241 ;;		_Lcd_Clear
   242 ;;		_Lcd_Init
   243 ;;		_Lcd_Set_Cursor
   244 ;;		_Lcd_Write_String
   245 ;; This function is called by:
   246 ;;		Startup code after reset
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           
   251                           ;psect for function _main
   252  0315                     _main:	
   253                           
   254                           ;main.c: 14: TRISB = 0x00;
   255                           
   256                           ;incstack = 0
   257                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   258  0315  1683               	bsf	3,5	;RP0=1, select bank1
   259  0316  0186               	clrf	6	;volatile
   260                           
   261                           ;main.c: 15: char *name = "MikeLaur";
   262  0317  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   263  0318  1283               	bcf	3,5	;RP0=0, select bank0
   264  0319  0098               	movwf	??_main
   265  031A  0818               	movf	??_main,w
   266  031B  0099               	movwf	main@name
   267                           
   268                           ;main.c: 17: RB5 = 0;
   269  031C  1286               	bcf	6,5	;volatile
   270                           
   271                           ;main.c: 19: Lcd_Init();
   272  031D  2388               	fcall	_Lcd_Init
   273  031E                     l746:	
   274                           ;main.c: 21: while(1) {
   275                           
   276                           
   277                           ;main.c: 22: Lcd_Clear();
   278  031E  22DC               	fcall	_Lcd_Clear
   279                           
   280                           ;main.c: 23: Lcd_Set_Cursor(1,1);
   281  031F  1283               	bcf	3,5	;RP0=0, select bank0
   282  0320  0190               	clrf	Lcd_Set_Cursor@b
   283  0321  0A90               	incf	Lcd_Set_Cursor@b,f
   284  0322  3001               	movlw	1
   285  0323  23BC               	fcall	_Lcd_Set_Cursor
   286                           
   287                           ;main.c: 25: Lcd_Write_String(name);
   288  0324  1283               	bcf	3,5	;RP0=0, select bank0
   289  0325  0819               	movf	main@name,w
   290  0326  0091               	movwf	Lcd_Write_String@a
   291  0327  3000               	movlw	0
   292  0328  1D03               	btfss	3,2
   293  0329  3080               	movlw	128
   294  032A  0092               	movwf	Lcd_Write_String@a+1
   295  032B  2357               	fcall	_Lcd_Write_String
   296  032C  2B1E               	goto	l746
   297  032D                     __end_of_main:	
   298                           
   299                           	psect	text1
   300  0357                     __ptext1:	
   301 ;; *************** function _Lcd_Write_String *****************
   302 ;; Defined at:
   303 ;;		line 110 in file "lcd.c"
   304 ;; Parameters:    Size  Location     Type
   305 ;;  a               2    5[BANK0 ] PTR unsigned char 
   306 ;;		 -> Lcd_Write_Int@temp(16), STR_1(9), 
   307 ;; Auto vars:     Size  Location     Type
   308 ;;  i               2   10[BANK0 ] int 
   309 ;; Return value:  Size  Location     Type
   310 ;;		None               void
   311 ;; Registers used:
   312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   313 ;; Tracked objects:
   314 ;;		On entry : 0/0
   315 ;;		On exit  : 0/0
   316 ;;		Unchanged: 0/0
   317 ;; Data sizes:     COMMON   BANK0
   318 ;;      Params:         0       2
   319 ;;      Locals:         0       2
   320 ;;      Temps:          0       3
   321 ;;      Totals:         0       7
   322 ;;Total ram usage:        7 bytes
   323 ;; Hardware stack levels used:    1
   324 ;; Hardware stack levels required when called:    2
   325 ;; This function calls:
   326 ;;		_Lcd_Write_Char
   327 ;; This function is called by:
   328 ;;		_main
   329 ;;		_Lcd_Write_Int
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           
   334                           ;psect for function _Lcd_Write_String
   335  0357                     _Lcd_Write_String:	
   336                           
   337                           ;lcd.c: 112: int i;
   338                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
   339                           
   340                           ;incstack = 0
   341                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   342  0357  1283               	bcf	3,5	;RP0=0, select bank0
   343  0358  0196               	clrf	Lcd_Write_String@i
   344  0359  0197               	clrf	Lcd_Write_String@i+1
   345  035A                     l736:	
   346  035A  0816               	movf	Lcd_Write_String@i,w
   347  035B  0711               	addwf	Lcd_Write_String@a,w
   348  035C  0094               	movwf	??_Lcd_Write_String+1
   349  035D  0812               	movf	Lcd_Write_String@a+1,w
   350  035E  0093               	movwf	??_Lcd_Write_String
   351  035F  1803               	skipnc
   352  0360  0A93               	incf	??_Lcd_Write_String,f
   353  0361  1B96               	btfsc	Lcd_Write_String@i,7
   354  0362  0393               	decf	??_Lcd_Write_String,f
   355  0363  1283               	bcf	3,5	;RP0=0, select bank0
   356  0364  0813               	movf	??_Lcd_Write_String,w
   357  0365  0095               	movwf	??_Lcd_Write_String+2
   358  0366  0815               	movf	??_Lcd_Write_String+2,w
   359  0367  00CF               	movwf	79
   360  0368  0814               	movf	??_Lcd_Write_String+1,w
   361  0369  0084               	movwf	4
   362  036A  2001               	fcall	stringtab
   363  036B  3A00               	xorlw	0
   364  036C  1903               	btfsc	3,2
   365  036D  0008               	return
   366                           
   367                           ;lcd.c: 114: {
   368                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
   369  036E  0816               	movf	Lcd_Write_String@i,w
   370  036F  0711               	addwf	Lcd_Write_String@a,w
   371  0370  0094               	movwf	??_Lcd_Write_String+1
   372  0371  0812               	movf	Lcd_Write_String@a+1,w
   373  0372  0093               	movwf	??_Lcd_Write_String
   374  0373  1803               	skipnc
   375  0374  0A93               	incf	??_Lcd_Write_String,f
   376  0375  1B96               	btfsc	Lcd_Write_String@i,7
   377  0376  0393               	decf	??_Lcd_Write_String,f
   378  0377  1283               	bcf	3,5	;RP0=0, select bank0
   379  0378  0813               	movf	??_Lcd_Write_String,w
   380  0379  0095               	movwf	??_Lcd_Write_String+2
   381  037A  0815               	movf	??_Lcd_Write_String+2,w
   382  037B  00CF               	movwf	79
   383  037C  0814               	movf	??_Lcd_Write_String+1,w
   384  037D  0084               	movwf	4
   385  037E  2001               	fcall	stringtab
   386  037F  232D               	fcall	_Lcd_Write_Char
   387  0380  3001               	movlw	1
   388  0381  1283               	bcf	3,5	;RP0=0, select bank0
   389  0382  0796               	addwf	Lcd_Write_String@i,f
   390  0383  1803               	skipnc
   391  0384  0A97               	incf	Lcd_Write_String@i+1,f
   392  0385  3000               	movlw	0
   393  0386  0797               	addwf	Lcd_Write_String@i+1,f
   394  0387  2B5A               	goto	l736
   395  0388                     __end_of_Lcd_Write_String:	
   396                           
   397                           	psect	text2
   398  032D                     __ptext2:	
   399 ;; *************** function _Lcd_Write_Char *****************
   400 ;; Defined at:
   401 ;;		line 93 in file "lcd.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  a               1    wreg     unsigned char 
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  a               1    4[BANK0 ] unsigned char 
   406 ;;  y               1    3[BANK0 ] unsigned char 
   407 ;;  temp            1    2[BANK0 ] unsigned char 
   408 ;; Return value:  Size  Location     Type
   409 ;;		None               void
   410 ;; Registers used:
   411 ;;		wreg, status,2, status,0, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0
   417 ;;      Params:         0       0
   418 ;;      Locals:         0       3
   419 ;;      Temps:          0       1
   420 ;;      Totals:         0       4
   421 ;;Total ram usage:        4 bytes
   422 ;; Hardware stack levels used:    1
   423 ;; Hardware stack levels required when called:    1
   424 ;; This function calls:
   425 ;;		_Lcd_Port
   426 ;; This function is called by:
   427 ;;		_Lcd_Write_String
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           
   432                           ;psect for function _Lcd_Write_Char
   433  032D                     _Lcd_Write_Char:	
   434                           
   435                           ;incstack = 0
   436                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   437                           ;Lcd_Write_Char@a stored from wreg
   438  032D  1283               	bcf	3,5	;RP0=0, select bank0
   439  032E  0090               	movwf	Lcd_Write_Char@a
   440                           
   441                           ;lcd.c: 95: char temp,y;
   442                           ;lcd.c: 96: temp = a&0x0F;
   443  032F  0810               	movf	Lcd_Write_Char@a,w
   444  0330  390F               	andlw	15
   445  0331  008D               	movwf	??_Lcd_Write_Char
   446  0332  080D               	movf	??_Lcd_Write_Char,w
   447  0333  008E               	movwf	Lcd_Write_Char@temp
   448                           
   449                           ;lcd.c: 97: y = a&0xF0;
   450  0334  0810               	movf	Lcd_Write_Char@a,w
   451  0335  39F0               	andlw	240
   452  0336  008D               	movwf	??_Lcd_Write_Char
   453  0337  080D               	movf	??_Lcd_Write_Char,w
   454  0338  008F               	movwf	Lcd_Write_Char@y
   455                           
   456                           ;lcd.c: 98: RB4 = 1;
   457  0339  1606               	bsf	6,4	;volatile
   458                           
   459                           ;lcd.c: 99: Lcd_Port(y>>4);
   460  033A  080F               	movf	Lcd_Write_Char@y,w
   461  033B  008D               	movwf	??_Lcd_Write_Char
   462  033C  3004               	movlw	4
   463  033D                     u175:	
   464  033D  1003               	clrc
   465  033E  0C8D               	rrf	??_Lcd_Write_Char,f
   466  033F  3EFF               	addlw	-1
   467  0340  1D03               	skipz
   468  0341  2B3D               	goto	u175
   469  0342  080D               	movf	??_Lcd_Write_Char,w
   470  0343  22FE               	fcall	_Lcd_Port
   471                           
   472                           ;lcd.c: 100: RB6 = 1;
   473  0344  1283               	bcf	3,5	;RP0=0, select bank0
   474  0345  1706               	bsf	6,6	;volatile
   475                           
   476                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
   477  0346  300D               	movlw	13
   478  0347  008D               	movwf	??_Lcd_Write_Char
   479  0348                     u257:	
   480  0348  0B8D               	decfsz	??_Lcd_Write_Char,f
   481  0349  2B48               	goto	u257
   482                           
   483                           ;lcd.c: 102: RB6 = 0;
   484  034A  1283               	bcf	3,5	;RP0=0, select bank0
   485  034B  1306               	bcf	6,6	;volatile
   486                           
   487                           ;lcd.c: 103: Lcd_Port(temp);
   488  034C  080E               	movf	Lcd_Write_Char@temp,w
   489  034D  22FE               	fcall	_Lcd_Port
   490                           
   491                           ;lcd.c: 104: RB6 = 1;
   492  034E  1283               	bcf	3,5	;RP0=0, select bank0
   493  034F  1706               	bsf	6,6	;volatile
   494                           
   495                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
   496  0350  300D               	movlw	13
   497  0351  008D               	movwf	??_Lcd_Write_Char
   498  0352                     u267:	
   499  0352  0B8D               	decfsz	??_Lcd_Write_Char,f
   500  0353  2B52               	goto	u267
   501                           
   502                           ;lcd.c: 106: RB6 = 0;
   503  0354  1283               	bcf	3,5	;RP0=0, select bank0
   504  0355  1306               	bcf	6,6	;volatile
   505  0356  0008               	return
   506  0357                     __end_of_Lcd_Write_Char:	
   507                           
   508                           	psect	text3
   509  03BC                     __ptext3:	
   510 ;; *************** function _Lcd_Set_Cursor *****************
   511 ;; Defined at:
   512 ;;		line 51 in file "lcd.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  a               1    wreg     unsigned char 
   515 ;;  b               1    4[BANK0 ] unsigned char 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  a               1    7[BANK0 ] unsigned char 
   518 ;;  temp            1   10[BANK0 ] unsigned char 
   519 ;;  y               1    9[BANK0 ] unsigned char 
   520 ;;  z               1    8[BANK0 ] unsigned char 
   521 ;; Return value:  Size  Location     Type
   522 ;;		None               void
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0
   530 ;;      Params:         0       1
   531 ;;      Locals:         0       4
   532 ;;      Temps:          0       2
   533 ;;      Totals:         0       7
   534 ;;Total ram usage:        7 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    2
   537 ;; This function calls:
   538 ;;		_Lcd_Cmd
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _Lcd_Set_Cursor
   546  03BC                     _Lcd_Set_Cursor:	
   547                           
   548                           ;incstack = 0
   549                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   550                           ;Lcd_Set_Cursor@a stored from wreg
   551  03BC  1283               	bcf	3,5	;RP0=0, select bank0
   552  03BD  0093               	movwf	Lcd_Set_Cursor@a
   553                           
   554                           ;lcd.c: 53: char temp,z,y;
   555                           ;lcd.c: 54: if(a == 1)
   556  03BE  0313               	decf	Lcd_Set_Cursor@a,w
   557  03BF  1D03               	btfss	3,2
   558  03C0  2BDD               	goto	l720
   559                           
   560                           ;lcd.c: 55: {
   561                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
   562  03C1  0810               	movf	Lcd_Set_Cursor@b,w
   563  03C2  3E7F               	addlw	127
   564  03C3  0091               	movwf	??_Lcd_Set_Cursor
   565  03C4  0811               	movf	??_Lcd_Set_Cursor,w
   566  03C5  0096               	movwf	Lcd_Set_Cursor@temp
   567                           
   568                           ;lcd.c: 57: z = temp>>4;
   569  03C6  0816               	movf	Lcd_Set_Cursor@temp,w
   570  03C7  0091               	movwf	??_Lcd_Set_Cursor
   571  03C8  3004               	movlw	4
   572  03C9                     u195:	
   573  03C9  1003               	clrc
   574  03CA  0C91               	rrf	??_Lcd_Set_Cursor,f
   575  03CB  3EFF               	addlw	-1
   576  03CC  1D03               	skipz
   577  03CD  2BC9               	goto	u195
   578  03CE  0811               	movf	??_Lcd_Set_Cursor,w
   579  03CF  0092               	movwf	??_Lcd_Set_Cursor+1
   580  03D0  0812               	movf	??_Lcd_Set_Cursor+1,w
   581  03D1  0094               	movwf	Lcd_Set_Cursor@z
   582                           
   583                           ;lcd.c: 58: y = temp & 0x0F;
   584  03D2  0816               	movf	Lcd_Set_Cursor@temp,w
   585  03D3  390F               	andlw	15
   586  03D4  0091               	movwf	??_Lcd_Set_Cursor
   587  03D5  0811               	movf	??_Lcd_Set_Cursor,w
   588  03D6  0095               	movwf	Lcd_Set_Cursor@y
   589                           
   590                           ;lcd.c: 59: Lcd_Cmd(z);
   591  03D7  0814               	movf	Lcd_Set_Cursor@z,w
   592  03D8  22EB               	fcall	_Lcd_Cmd
   593                           
   594                           ;lcd.c: 60: Lcd_Cmd(y);
   595  03D9  1283               	bcf	3,5	;RP0=0, select bank0
   596  03DA  0815               	movf	Lcd_Set_Cursor@y,w
   597  03DB  22EB               	fcall	_Lcd_Cmd
   598                           
   599                           ;lcd.c: 61: }
   600  03DC  0008               	return
   601  03DD                     l720:	
   602                           
   603                           ;lcd.c: 62: else if(a == 2)
   604  03DD  3002               	movlw	2
   605  03DE  1283               	bcf	3,5	;RP0=0, select bank0
   606  03DF  0613               	xorwf	Lcd_Set_Cursor@a,w
   607  03E0  1D03               	btfss	3,2
   608  03E1  0008               	return
   609                           
   610                           ;lcd.c: 63: {
   611                           ;lcd.c: 64: temp = 0xC0 + b - 1;
   612  03E2  0810               	movf	Lcd_Set_Cursor@b,w
   613  03E3  3EBF               	addlw	191
   614  03E4  0091               	movwf	??_Lcd_Set_Cursor
   615  03E5  0811               	movf	??_Lcd_Set_Cursor,w
   616  03E6  0096               	movwf	Lcd_Set_Cursor@temp
   617                           
   618                           ;lcd.c: 65: z = temp>>4;
   619  03E7  0816               	movf	Lcd_Set_Cursor@temp,w
   620  03E8  0091               	movwf	??_Lcd_Set_Cursor
   621  03E9  3004               	movlw	4
   622  03EA                     u215:	
   623  03EA  1003               	clrc
   624  03EB  0C91               	rrf	??_Lcd_Set_Cursor,f
   625  03EC  3EFF               	addlw	-1
   626  03ED  1D03               	skipz
   627  03EE  2BEA               	goto	u215
   628  03EF  0811               	movf	??_Lcd_Set_Cursor,w
   629  03F0  0092               	movwf	??_Lcd_Set_Cursor+1
   630  03F1  0812               	movf	??_Lcd_Set_Cursor+1,w
   631  03F2  0094               	movwf	Lcd_Set_Cursor@z
   632                           
   633                           ;lcd.c: 66: y = temp & 0x0F;
   634  03F3  0816               	movf	Lcd_Set_Cursor@temp,w
   635  03F4  390F               	andlw	15
   636  03F5  0091               	movwf	??_Lcd_Set_Cursor
   637  03F6  0811               	movf	??_Lcd_Set_Cursor,w
   638  03F7  0095               	movwf	Lcd_Set_Cursor@y
   639                           
   640                           ;lcd.c: 67: Lcd_Cmd(z);
   641  03F8  0814               	movf	Lcd_Set_Cursor@z,w
   642  03F9  22EB               	fcall	_Lcd_Cmd
   643                           
   644                           ;lcd.c: 68: Lcd_Cmd(y);
   645  03FA  1283               	bcf	3,5	;RP0=0, select bank0
   646  03FB  0815               	movf	Lcd_Set_Cursor@y,w
   647  03FC  22EB               	fcall	_Lcd_Cmd
   648  03FD  0008               	return
   649  03FE                     __end_of_Lcd_Set_Cursor:	
   650                           
   651                           	psect	text4
   652  0388                     __ptext4:	
   653 ;; *************** function _Lcd_Init *****************
   654 ;; Defined at:
   655 ;;		line 73 in file "lcd.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;		None               void
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0, pclath, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0
   669 ;;      Params:         0       0
   670 ;;      Locals:         0       0
   671 ;;      Temps:          0       2
   672 ;;      Totals:         0       2
   673 ;;Total ram usage:        2 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    2
   676 ;; This function calls:
   677 ;;		_Lcd_Cmd
   678 ;;		_Lcd_Port
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           
   685                           ;psect for function _Lcd_Init
   686  0388                     _Lcd_Init:	
   687                           
   688                           ;lcd.c: 75: Lcd_Port(0x00);
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   692  0388  3000               	movlw	0
   693  0389  22FE               	fcall	_Lcd_Port
   694                           
   695                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
   696  038A  301A               	movlw	26
   697  038B  1283               	bcf	3,5	;RP0=0, select bank0
   698  038C  0091               	movwf	??_Lcd_Init+1
   699  038D  30F8               	movlw	248
   700  038E  0090               	movwf	??_Lcd_Init
   701  038F                     u277:	
   702  038F  0B90               	decfsz	??_Lcd_Init,f
   703  0390  2B8F               	goto	u277
   704  0391  0B91               	decfsz	??_Lcd_Init+1,f
   705  0392  2B8F               	goto	u277
   706  0393  0000               	nop
   707                           
   708                           ;lcd.c: 77: Lcd_Cmd(0x03);
   709  0394  3003               	movlw	3
   710  0395  22EB               	fcall	_Lcd_Cmd
   711                           
   712                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
   713  0396  3007               	movlw	7
   714  0397  1283               	bcf	3,5	;RP0=0, select bank0
   715  0398  0091               	movwf	??_Lcd_Init+1
   716  0399  307D               	movlw	125
   717  039A  0090               	movwf	??_Lcd_Init
   718  039B                     u287:	
   719  039B  0B90               	decfsz	??_Lcd_Init,f
   720  039C  2B9B               	goto	u287
   721  039D  0B91               	decfsz	??_Lcd_Init+1,f
   722  039E  2B9B               	goto	u287
   723                           
   724                           ;lcd.c: 79: Lcd_Cmd(0x03);
   725  039F  3003               	movlw	3
   726  03A0  22EB               	fcall	_Lcd_Cmd
   727                           
   728                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
   729  03A1  300F               	movlw	15
   730  03A2  1283               	bcf	3,5	;RP0=0, select bank0
   731  03A3  0091               	movwf	??_Lcd_Init+1
   732  03A4  3047               	movlw	71
   733  03A5  0090               	movwf	??_Lcd_Init
   734  03A6                     u297:	
   735  03A6  0B90               	decfsz	??_Lcd_Init,f
   736  03A7  2BA6               	goto	u297
   737  03A8  0B91               	decfsz	??_Lcd_Init+1,f
   738  03A9  2BA6               	goto	u297
   739  03AA  2BAB               	nop2
   740                           
   741                           ;lcd.c: 81: Lcd_Cmd(0x03);
   742  03AB  3003               	movlw	3
   743  03AC  22EB               	fcall	_Lcd_Cmd
   744                           
   745                           ;lcd.c: 83: Lcd_Cmd(0x02);
   746  03AD  3002               	movlw	2
   747  03AE  22EB               	fcall	_Lcd_Cmd
   748                           
   749                           ;lcd.c: 84: Lcd_Cmd(0x02);
   750  03AF  3002               	movlw	2
   751  03B0  22EB               	fcall	_Lcd_Cmd
   752                           
   753                           ;lcd.c: 85: Lcd_Cmd(0x08);
   754  03B1  3008               	movlw	8
   755  03B2  22EB               	fcall	_Lcd_Cmd
   756                           
   757                           ;lcd.c: 86: Lcd_Cmd(0x00);
   758  03B3  3000               	movlw	0
   759  03B4  22EB               	fcall	_Lcd_Cmd
   760                           
   761                           ;lcd.c: 87: Lcd_Cmd(0x0C);
   762  03B5  300C               	movlw	12
   763  03B6  22EB               	fcall	_Lcd_Cmd
   764                           
   765                           ;lcd.c: 88: Lcd_Cmd(0x00);
   766  03B7  3000               	movlw	0
   767  03B8  22EB               	fcall	_Lcd_Cmd
   768                           
   769                           ;lcd.c: 89: Lcd_Cmd(0x06);
   770  03B9  3006               	movlw	6
   771  03BA  22EB               	fcall	_Lcd_Cmd
   772  03BB  0008               	return
   773  03BC                     __end_of_Lcd_Init:	
   774                           
   775                           	psect	text5
   776  02DC                     __ptext5:	
   777 ;; *************** function _Lcd_Clear *****************
   778 ;; Defined at:
   779 ;;		line 43 in file "lcd.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;		None               void
   786 ;; Registers used:
   787 ;;		wreg, status,2, status,0, pclath, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0
   793 ;;      Params:         0       0
   794 ;;      Locals:         0       0
   795 ;;      Temps:          0       2
   796 ;;      Totals:         0       2
   797 ;;Total ram usage:        2 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    2
   800 ;; This function calls:
   801 ;;		_Lcd_Cmd
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           
   808                           ;psect for function _Lcd_Clear
   809  02DC                     _Lcd_Clear:	
   810                           
   811                           ;lcd.c: 45: Lcd_Cmd(0x00);
   812                           
   813                           ;incstack = 0
   814                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
   815  02DC  3000               	movlw	0
   816  02DD  22EB               	fcall	_Lcd_Cmd
   817                           
   818                           ;lcd.c: 46: Lcd_Cmd(0x01);
   819  02DE  3001               	movlw	1
   820  02DF  22EB               	fcall	_Lcd_Cmd
   821                           
   822                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
   823  02E0  3003               	movlw	3
   824  02E1  1283               	bcf	3,5	;RP0=0, select bank0
   825  02E2  0091               	movwf	??_Lcd_Clear+1
   826  02E3  3097               	movlw	151
   827  02E4  0090               	movwf	??_Lcd_Clear
   828  02E5                     u307:	
   829  02E5  0B90               	decfsz	??_Lcd_Clear,f
   830  02E6  2AE5               	goto	u307
   831  02E7  0B91               	decfsz	??_Lcd_Clear+1,f
   832  02E8  2AE5               	goto	u307
   833  02E9  2AEA               	nop2
   834  02EA  0008               	return
   835  02EB                     __end_of_Lcd_Clear:	
   836                           
   837                           	psect	text6
   838  02EB                     __ptext6:	
   839 ;; *************** function _Lcd_Cmd *****************
   840 ;; Defined at:
   841 ;;		line 30 in file "lcd.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  a               1    wreg     unsigned char 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  a               1    3[BANK0 ] unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;		None               void
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0, pclath, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0
   855 ;;      Params:         0       0
   856 ;;      Locals:         0       1
   857 ;;      Temps:          0       2
   858 ;;      Totals:         0       3
   859 ;;Total ram usage:        3 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    1
   862 ;; This function calls:
   863 ;;		_Lcd_Port
   864 ;; This function is called by:
   865 ;;		_Lcd_Clear
   866 ;;		_Lcd_Set_Cursor
   867 ;;		_Lcd_Init
   868 ;;		_Lcd_Shift_Right
   869 ;;		_Lcd_Shift_Left
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           
   874                           ;psect for function _Lcd_Cmd
   875  02EB                     _Lcd_Cmd:	
   876                           
   877                           ;incstack = 0
   878                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
   879                           ;Lcd_Cmd@a stored from wreg
   880  02EB  1283               	bcf	3,5	;RP0=0, select bank0
   881  02EC  008F               	movwf	Lcd_Cmd@a
   882                           
   883                           ;lcd.c: 33: RB4 = 0;
   884  02ED  1206               	bcf	6,4	;volatile
   885                           
   886                           ;lcd.c: 34: Lcd_Port(a);
   887  02EE  080F               	movf	Lcd_Cmd@a,w
   888  02EF  22FE               	fcall	_Lcd_Port
   889                           
   890                           ;lcd.c: 37: RB6 = 1;
   891  02F0  1283               	bcf	3,5	;RP0=0, select bank0
   892  02F1  1706               	bsf	6,6	;volatile
   893                           
   894                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
   895  02F2  3006               	movlw	6
   896  02F3  008E               	movwf	??_Lcd_Cmd+1
   897  02F4  3030               	movlw	48
   898  02F5  008D               	movwf	??_Lcd_Cmd
   899  02F6                     u317:	
   900  02F6  0B8D               	decfsz	??_Lcd_Cmd,f
   901  02F7  2AF6               	goto	u317
   902  02F8  0B8E               	decfsz	??_Lcd_Cmd+1,f
   903  02F9  2AF6               	goto	u317
   904  02FA  0000               	nop
   905                           
   906                           ;lcd.c: 39: RB6 = 0;
   907  02FB  1283               	bcf	3,5	;RP0=0, select bank0
   908  02FC  1306               	bcf	6,6	;volatile
   909  02FD  0008               	return
   910  02FE                     __end_of_Lcd_Cmd:	
   911                           
   912                           	psect	text7
   913  02FE                     __ptext7:	
   914 ;; *************** function _Lcd_Port *****************
   915 ;; Defined at:
   916 ;;		line 6 in file "lcd.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  a               1    wreg     unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  a               1    0[BANK0 ] unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;		None               void
   923 ;; Registers used:
   924 ;;		wreg
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMMON   BANK0
   930 ;;      Params:         0       0
   931 ;;      Locals:         0       1
   932 ;;      Temps:          0       0
   933 ;;      Totals:         0       1
   934 ;;Total ram usage:        1 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_Lcd_Cmd
   940 ;;		_Lcd_Init
   941 ;;		_Lcd_Write_Char
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _Lcd_Port
   947  02FE                     _Lcd_Port:	
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _Lcd_Port: [wreg]
   951                           ;Lcd_Port@a stored from wreg
   952  02FE  1283               	bcf	3,5	;RP0=0, select bank0
   953  02FF  008C               	movwf	Lcd_Port@a
   954                           
   955                           ;lcd.c: 8: if(a & 1)
   956  0300  1C0C               	btfss	Lcd_Port@a,0
   957  0301  2B04               	goto	l37
   958                           
   959                           ;lcd.c: 9: RB0 = 1;
   960  0302  1406               	bsf	6,0	;volatile
   961  0303  2B05               	goto	l38
   962  0304                     l37:	
   963                           
   964                           ;lcd.c: 10: else
   965                           ;lcd.c: 11: RB0 = 0;
   966  0304  1006               	bcf	6,0	;volatile
   967  0305                     l38:	
   968                           
   969                           ;lcd.c: 13: if(a & 2)
   970  0305  1C8C               	btfss	Lcd_Port@a,1
   971  0306  2B09               	goto	l39
   972                           
   973                           ;lcd.c: 14: RB1 = 1;
   974  0307  1486               	bsf	6,1	;volatile
   975  0308  2B0A               	goto	l40
   976  0309                     l39:	
   977                           
   978                           ;lcd.c: 15: else
   979                           ;lcd.c: 16: RB1 = 0;
   980  0309  1086               	bcf	6,1	;volatile
   981  030A                     l40:	
   982                           
   983                           ;lcd.c: 18: if(a & 4)
   984  030A  1D0C               	btfss	Lcd_Port@a,2
   985  030B  2B0E               	goto	l41
   986                           
   987                           ;lcd.c: 19: RB2 = 1;
   988  030C  1506               	bsf	6,2	;volatile
   989  030D  2B0F               	goto	l42
   990  030E                     l41:	
   991                           
   992                           ;lcd.c: 20: else
   993                           ;lcd.c: 21: RB2 = 0;
   994  030E  1106               	bcf	6,2	;volatile
   995  030F                     l42:	
   996                           
   997                           ;lcd.c: 23: if(a & 8)
   998  030F  1D8C               	btfss	Lcd_Port@a,3
   999  0310  2B13               	goto	l43
  1000                           
  1001                           ;lcd.c: 24: RB3 = 1;
  1002  0311  1586               	bsf	6,3	;volatile
  1003  0312  0008               	return
  1004  0313                     l43:	
  1005                           
  1006                           ;lcd.c: 25: else
  1007                           ;lcd.c: 26: RB3 = 0;
  1008  0313  1186               	bcf	6,3	;volatile
  1009  0314  0008               	return
  1010  0315                     __end_of_Lcd_Port:	
  1011  004E                     btemp	set	78	;btemp
  1012  004E                     wtemp	set	78
  1013  004E                     wtemp0	set	78
  1014  0050                     wtemp1	set	80
  1015  0052                     wtemp2	set	82
  1016  0054                     wtemp3	set	84
  1017  0056                     wtemp4	set	86
  1018  0058                     wtemp5	set	88
  1019  004F                     wtemp6	set	79
  1020  004E                     ttemp	set	78
  1021  004E                     ttemp0	set	78
  1022  0051                     ttemp1	set	81
  1023  0054                     ttemp2	set	84
  1024  0057                     ttemp3	set	87
  1025  004F                     ttemp4	set	79
  1026  004E                     ltemp	set	78
  1027  004E                     ltemp0	set	78
  1028  0052                     ltemp1	set	82
  1029  0056                     ltemp2	set	86
  1030  0050                     ltemp3	set	80


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     14      14

Pointer List with Targets:

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_1(CODE[9]), 

    main@name	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1138
                                             12 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     374
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     433
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      E       E       3       21.2%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Apr 11 16:13:10 2016

                        pc 0002                __CFG_CP$OFF 0000                         l40 030A  
                       l41 030E                         l42 030F                         l43 0313  
                       l37 0304                         l38 0305                         l39 0309  
                       fsr 0004                        l720 03DD                        l736 035A  
                      l746 031E                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        _RB6 0036                        u215 03EA  
                      u307 02E5                        u317 02F6                        u175 033D  
                      u257 0348                        u195 03C9                        u267 0352  
                      u277 038F                        u287 039B                        u297 03A6  
                      fsr0 0004                        indf 0000               __CFG_FOSC$XT 0000  
                     STR_1 0011          ?_Lcd_Write_String 0011                       _main 0315  
                     btemp 004E                       ltemp 004E                       start 0000  
                     ttemp 004E         ??_Lcd_Write_String 0013                       wtemp 004E  
          __end_of_Lcd_Cmd 02FE                      ?_main 000C              __CFG_WDTE$OFF 0000  
  __size_of_Lcd_Set_Cursor 0042                      _TRISB 0086              __CFG_PWRTE$ON 0000  
                    pclath 000A                      ltemp0 004E                      ltemp1 0052  
                    ltemp2 0056                      ltemp3 0050                      ttemp0 004E  
                    ttemp1 0051                      ttemp2 0054                      ttemp3 0057  
                    ttemp4 004F                      status 0003                      wtemp0 004E  
                    wtemp1 0050                      wtemp2 0052                      wtemp3 0054  
                    wtemp4 0056                      wtemp5 0058                      wtemp6 004F  
         __end_of_Lcd_Init 03BC           __end_of_Lcd_Port 0315            __initialization 03FE  
             __end_of_main 032D                     ??_main 0018         __size_of_Lcd_Clear 000F  
                ??_Lcd_Cmd 000D    __size_of_Lcd_Write_Char 002A            Lcd_Set_Cursor@a 0013  
          Lcd_Set_Cursor@b 0010            Lcd_Set_Cursor@y 0015            Lcd_Set_Cursor@z 0014  
  __end_of__initialization 03FE          __end_of_Lcd_Clear 02EB             __pcstackCOMMON 0000  
           _Lcd_Set_Cursor 03BC                  ?_Lcd_Init 000C                  ?_Lcd_Port 000C  
               __pmaintext 0315  __size_of_Lcd_Write_String 0031     __end_of_Lcd_Set_Cursor 03FE  
               ??_Lcd_Init 0010                 ??_Lcd_Port 0000                 __stringtab 0001  
           _Lcd_Write_Char 032D                    _Lcd_Cmd 02EB            ?_Lcd_Set_Cursor 0010  
                  __ptext1 0357                    __ptext2 032D                    __ptext3 03BC  
                  __ptext4 0388                    __ptext5 02DC                    __ptext6 02EB  
                  __ptext7 02FE     __end_of_Lcd_Write_Char 0357       end_of_initialization 03FE  
                Lcd_Port@a 000C            ?_Lcd_Write_Char 000C          Lcd_Write_String@a 0011  
        Lcd_Write_String@i 0016                  _Lcd_Clear 02DC           _Lcd_Write_String 0357  
      start_initialization 03FE          __size_of_Lcd_Init 0034          __size_of_Lcd_Port 0017  
               ?_Lcd_Clear 000C            Lcd_Write_Char@a 0010            Lcd_Write_Char@y 000F  
                ___latbits 0000              __pcstackBANK0 000C                   ?_Lcd_Cmd 000C  
         ??_Lcd_Set_Cursor 0011                  __pstrings 0001                   Lcd_Cmd@a 000F  
              ??_Lcd_Clear 0010                __stringbase 0010           ??_Lcd_Write_Char 000D  
                 _Lcd_Init 0388                   _Lcd_Port 02FE   __end_of_Lcd_Write_String 0388  
         __size_of_Lcd_Cmd 0013         __end_of__stringtab 0011              __size_of_main 0018  
                 main@name 0019         Lcd_Write_Char@temp 000E                  stringcode 000B  
       Lcd_Set_Cursor@temp 0016                   stringdir 000B                   stringtab 0001  
