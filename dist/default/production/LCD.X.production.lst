

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Apr 11 17:04:00 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x4E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  0081                     	;# 
    30  0085                     	;# 
    31  0086                     	;# 
    32  0088                     	;# 
    33  0089                     	;# 
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  0081                     	;# 
    46  0085                     	;# 
    47  0086                     	;# 
    48  0088                     	;# 
    49  0089                     	;# 
    50  0030                     _RB0	set	48
    51  0031                     _RB1	set	49
    52  0032                     _RB2	set	50
    53  0033                     _RB3	set	51
    54  0034                     _RB4	set	52
    55  0035                     _RB5	set	53
    56  0036                     _RB6	set	54
    57  0085                     _TRISA	set	133
    58  0086                     _TRISB	set	134
    59                           
    60                           	psect	strings
    61  0001                     __pstrings:	
    62  0001                     stringtab:	
    63  0001                     __stringtab:	
    64                           
    65                           ;	String table - string pointers are 1 byte each
    66  0001  1BCF               	btfsc	btemp+1,7
    67  0002  280B               	ljmp	stringcode
    68  0003  1383               	bcf	3,7
    69  0004  184F               	btfsc	btemp+1,0
    70  0005  1783               	bsf	3,7
    71  0006  0800               	movf	0,w
    72  0007  0A84               	incf	4,f
    73  0008  1903               	skipnz
    74  0009  0ACF               	incf	btemp+1,f
    75  000A  0008               	return
    76  000B                     stringcode:	
    77  000B                     stringdir:	
    78  000B  3000               	movlw	high stringdir
    79  000C  008A               	movwf	10
    80  000D  0804               	movf	4,w
    81  000E  0A84               	incf	4,f
    82  000F  0782               	addwf	2,f
    83  0010                     __stringbase:	
    84  0010  3400               	retlw	0
    85  0011                     __end_of__stringtab:	
    86  0011                     STR_1:	
    87  0011  3450               	retlw	80	;'P'
    88  0012  3475               	retlw	117	;'u'
    89  0013  3473               	retlw	115	;'s'
    90  0014  3468               	retlw	104	;'h'
    91  0015  3420               	retlw	32	;' '
    92  0016  3462               	retlw	98	;'b'
    93  0017  3475               	retlw	117	;'u'
    94  0018  3400               	retlw	0
    95  0019                     STR_2:	
    96  0019  3474               	retlw	116	;'t'
    97  001A  3474               	retlw	116	;'t'
    98  001B  346F               	retlw	111	;'o'
    99  001C  346E               	retlw	110	;'n'
   100  001D  3400               	retlw	0
   101                           
   102                           ; #config settings
   103  0000                     
   104                           	psect	cinit
   105  03FE                     start_initialization:	
   106  03FE                     __initialization:	
   107  03FE                     end_of_initialization:	
   108                           ;End of C runtime variable initialization code
   109                           
   110  03FE                     __end_of__initialization:	
   111  03FE  0183               	clrf	3
   112  03FF  2B28               	ljmp	_main	;jump to C main() function
   113                           
   114                           	psect	cstackCOMMON
   115  0000                     __pcstackCOMMON:	
   116  0000                     ??_Lcd_Shift_Right:	
   117  0000                     ??_Lcd_Port:	
   118                           ; 0 bytes @ 0x0
   119                           
   120                           
   121                           	psect	cstackBANK0
   122  000C                     __pcstackBANK0:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  000C                     ?_Lcd_Init:	
   126  000C                     ?_Lcd_Clear:	
   127                           ; 0 bytes @ 0x0
   128                           
   129  000C                     ?_Lcd_Shift_Right:	
   130                           ; 0 bytes @ 0x0
   131                           
   132  000C                     ?_main:	
   133                           ; 0 bytes @ 0x0
   134                           
   135  000C                     ?_Lcd_Port:	
   136                           ; 0 bytes @ 0x0
   137                           
   138  000C                     ?_Lcd_Cmd:	
   139                           ; 0 bytes @ 0x0
   140                           
   141  000C                     ?_Lcd_Write_Char:	
   142                           ; 0 bytes @ 0x0
   143                           
   144  000C                     Lcd_Port@a:	
   145                           ; 0 bytes @ 0x0
   146                           
   147                           
   148                           ; 1 bytes @ 0x0
   149  000C                     	ds	1
   150  000D                     ??_Lcd_Cmd:	
   151  000D                     ??_Lcd_Write_Char:	
   152                           ; 0 bytes @ 0x1
   153                           
   154                           
   155                           ; 0 bytes @ 0x1
   156  000D                     	ds	1
   157  000E                     Lcd_Write_Char@temp:	
   158                           
   159                           ; 1 bytes @ 0x2
   160  000E                     	ds	1
   161  000F                     Lcd_Cmd@a:	
   162  000F                     Lcd_Write_Char@y:	
   163                           ; 1 bytes @ 0x3
   164                           
   165                           
   166                           ; 1 bytes @ 0x3
   167  000F                     	ds	1
   168  0010                     ??_Lcd_Init:	
   169  0010                     ??_Lcd_Clear:	
   170                           ; 0 bytes @ 0x4
   171                           
   172  0010                     ?_Lcd_Set_Cursor:	
   173                           ; 0 bytes @ 0x4
   174                           
   175  0010                     Lcd_Set_Cursor@b:	
   176                           ; 0 bytes @ 0x4
   177                           
   178  0010                     Lcd_Write_Char@a:	
   179                           ; 1 bytes @ 0x4
   180                           
   181                           
   182                           ; 1 bytes @ 0x4
   183  0010                     	ds	1
   184  0011                     ??_Lcd_Set_Cursor:	
   185  0011                     ?_Lcd_Write_String:	
   186                           ; 0 bytes @ 0x5
   187                           
   188  0011                     Lcd_Write_String@a:	
   189                           ; 0 bytes @ 0x5
   190                           
   191                           
   192                           ; 2 bytes @ 0x5
   193  0011                     	ds	2
   194  0013                     ??_Lcd_Write_String:	
   195  0013                     Lcd_Set_Cursor@a:	
   196                           ; 0 bytes @ 0x7
   197                           
   198                           
   199                           ; 1 bytes @ 0x7
   200  0013                     	ds	1
   201  0014                     Lcd_Set_Cursor@z:	
   202                           
   203                           ; 1 bytes @ 0x8
   204  0014                     	ds	1
   205  0015                     Lcd_Set_Cursor@y:	
   206                           
   207                           ; 1 bytes @ 0x9
   208  0015                     	ds	1
   209  0016                     Lcd_Set_Cursor@temp:	
   210  0016                     Lcd_Write_String@i:	
   211                           ; 1 bytes @ 0xA
   212                           
   213                           
   214                           ; 2 bytes @ 0xA
   215  0016                     	ds	2
   216  0018                     ??_main:	
   217                           
   218                           ; 0 bytes @ 0xC
   219  0018                     	ds	1
   220  0019                     main@start:	
   221                           
   222                           ; 1 bytes @ 0xD
   223  0019                     	ds	1
   224  001A                     main@end:	
   225                           
   226                           ; 1 bytes @ 0xE
   227  001A                     	ds	1
   228                           
   229                           	psect	maintext
   230  0328                     __pmaintext:	
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 13 in file "main.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;  end             1   14[BANK0 ] PTR unsigned char 
   241 ;;		 -> STR_2(5), 
   242 ;;  start           1   13[BANK0 ] PTR unsigned char 
   243 ;;		 -> STR_1(8), 
   244 ;; Return value:  Size  Location     Type
   245 ;;		None               void
   246 ;; Registers used:
   247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   248 ;; Tracked objects:
   249 ;;		On entry : B00/0
   250 ;;		On exit  : 0/0
   251 ;;		Unchanged: 0/0
   252 ;; Data sizes:     COMMON   BANK0
   253 ;;      Params:         0       0
   254 ;;      Locals:         0       2
   255 ;;      Temps:          0       1
   256 ;;      Totals:         0       3
   257 ;;Total ram usage:        3 bytes
   258 ;; Hardware stack levels required when called:    3
   259 ;; This function calls:
   260 ;;		_Lcd_Clear
   261 ;;		_Lcd_Init
   262 ;;		_Lcd_Set_Cursor
   263 ;;		_Lcd_Shift_Right
   264 ;;		_Lcd_Write_String
   265 ;; This function is called by:
   266 ;;		Startup code after reset
   267 ;; This function uses a non-reentrant model
   268 ;;
   269                           
   270                           
   271                           ;psect for function _main
   272  0328                     _main:	
   273                           
   274                           ;main.c: 14: TRISA = 0xFF;
   275                           
   276                           ;incstack = 0
   277                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   278  0328  30FF               	movlw	255
   279  0329  1683               	bsf	3,5	;RP0=1, select bank1
   280  032A  0085               	movwf	5	;volatile
   281                           
   282                           ;main.c: 15: TRISB = 0x00;
   283  032B  0186               	clrf	6	;volatile
   284                           
   285                           ;main.c: 17: RB5 = 0;
   286  032C  1283               	bcf	3,5	;RP0=0, select bank0
   287  032D  1286               	bcf	6,5	;volatile
   288                           
   289                           ;main.c: 19: Lcd_Init();
   290  032E  2388               	fcall	_Lcd_Init
   291                           
   292                           ;main.c: 21: char *start = "Push bu";
   293  032F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   294  0330  1283               	bcf	3,5	;RP0=0, select bank0
   295  0331  0098               	movwf	??_main
   296  0332  0818               	movf	??_main,w
   297  0333  0099               	movwf	main@start
   298                           
   299                           ;main.c: 22: char *end = "tton";
   300  0334  3009               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   301  0335  0098               	movwf	??_main
   302  0336  0818               	movf	??_main,w
   303  0337  009A               	movwf	main@end
   304  0338                     l778:	
   305                           ;main.c: 24: while (1) {
   306                           
   307                           
   308                           ;main.c: 25: Lcd_Clear();
   309  0338  22C5               	fcall	_Lcd_Clear
   310                           
   311                           ;main.c: 26: Lcd_Set_Cursor(1, 1);
   312  0339  1283               	bcf	3,5	;RP0=0, select bank0
   313  033A  0190               	clrf	Lcd_Set_Cursor@b
   314  033B  0A90               	incf	Lcd_Set_Cursor@b,f
   315  033C  3001               	movlw	1
   316  033D  23BC               	fcall	_Lcd_Set_Cursor
   317                           
   318                           ;main.c: 27: Lcd_Write_String(end);
   319  033E  1283               	bcf	3,5	;RP0=0, select bank0
   320  033F  081A               	movf	main@end,w
   321  0340  0091               	movwf	Lcd_Write_String@a
   322  0341  3000               	movlw	0
   323  0342  1D03               	btfss	3,2
   324  0343  3080               	movlw	128
   325  0344  0092               	movwf	Lcd_Write_String@a+1
   326  0345  2357               	fcall	_Lcd_Write_String
   327                           
   328                           ;main.c: 33: Lcd_Shift_Right();
   329  0346  22C0               	fcall	_Lcd_Shift_Right
   330                           
   331                           ;main.c: 34: Lcd_Shift_Right();
   332  0347  22C0               	fcall	_Lcd_Shift_Right
   333                           
   334                           ;main.c: 35: Lcd_Shift_Right();
   335  0348  22C0               	fcall	_Lcd_Shift_Right
   336                           
   337                           ;main.c: 36: Lcd_Shift_Right();
   338  0349  22C0               	fcall	_Lcd_Shift_Right
   339                           
   340                           ;main.c: 37: Lcd_Shift_Right();
   341  034A  22C0               	fcall	_Lcd_Shift_Right
   342                           
   343                           ;main.c: 38: Lcd_Shift_Right();
   344  034B  22C0               	fcall	_Lcd_Shift_Right
   345                           
   346                           ;main.c: 39: Lcd_Shift_Right();
   347  034C  22C0               	fcall	_Lcd_Shift_Right
   348                           
   349                           ;main.c: 40: Lcd_Shift_Right();
   350  034D  22C0               	fcall	_Lcd_Shift_Right
   351                           
   352                           ;main.c: 41: Lcd_Write_String(start);
   353  034E  1283               	bcf	3,5	;RP0=0, select bank0
   354  034F  0819               	movf	main@start,w
   355  0350  0091               	movwf	Lcd_Write_String@a
   356  0351  3000               	movlw	0
   357  0352  1D03               	btfss	3,2
   358  0353  3080               	movlw	128
   359  0354  0092               	movwf	Lcd_Write_String@a+1
   360  0355  2357               	fcall	_Lcd_Write_String
   361  0356  2B38               	goto	l778
   362  0357                     __end_of_main:	
   363                           
   364                           	psect	text1
   365  0357                     __ptext1:	
   366 ;; *************** function _Lcd_Write_String *****************
   367 ;; Defined at:
   368 ;;		line 110 in file "lcd.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;  a               2    5[BANK0 ] PTR unsigned char 
   371 ;;		 -> Lcd_Write_Int@temp(16), STR_2(5), STR_1(8), 
   372 ;; Auto vars:     Size  Location     Type
   373 ;;  i               2   10[BANK0 ] int 
   374 ;; Return value:  Size  Location     Type
   375 ;;		None               void
   376 ;; Registers used:
   377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   378 ;; Tracked objects:
   379 ;;		On entry : 0/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMMON   BANK0
   383 ;;      Params:         0       2
   384 ;;      Locals:         0       2
   385 ;;      Temps:          0       3
   386 ;;      Totals:         0       7
   387 ;;Total ram usage:        7 bytes
   388 ;; Hardware stack levels used:    1
   389 ;; Hardware stack levels required when called:    2
   390 ;; This function calls:
   391 ;;		_Lcd_Write_Char
   392 ;; This function is called by:
   393 ;;		_main
   394 ;;		_Lcd_Write_Int
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           
   399                           ;psect for function _Lcd_Write_String
   400  0357                     _Lcd_Write_String:	
   401                           
   402                           ;lcd.c: 112: int i;
   403                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
   404                           
   405                           ;incstack = 0
   406                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   407  0357  1283               	bcf	3,5	;RP0=0, select bank0
   408  0358  0196               	clrf	Lcd_Write_String@i
   409  0359  0197               	clrf	Lcd_Write_String@i+1
   410  035A                     l762:	
   411  035A  0816               	movf	Lcd_Write_String@i,w
   412  035B  0711               	addwf	Lcd_Write_String@a,w
   413  035C  0094               	movwf	??_Lcd_Write_String+1
   414  035D  0812               	movf	Lcd_Write_String@a+1,w
   415  035E  0093               	movwf	??_Lcd_Write_String
   416  035F  1803               	skipnc
   417  0360  0A93               	incf	??_Lcd_Write_String,f
   418  0361  1B96               	btfsc	Lcd_Write_String@i,7
   419  0362  0393               	decf	??_Lcd_Write_String,f
   420  0363  1283               	bcf	3,5	;RP0=0, select bank0
   421  0364  0813               	movf	??_Lcd_Write_String,w
   422  0365  0095               	movwf	??_Lcd_Write_String+2
   423  0366  0815               	movf	??_Lcd_Write_String+2,w
   424  0367  00CF               	movwf	79
   425  0368  0814               	movf	??_Lcd_Write_String+1,w
   426  0369  0084               	movwf	4
   427  036A  2001               	fcall	stringtab
   428  036B  3A00               	xorlw	0
   429  036C  1903               	btfsc	3,2
   430  036D  0008               	return
   431                           
   432                           ;lcd.c: 114: {
   433                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
   434  036E  0816               	movf	Lcd_Write_String@i,w
   435  036F  0711               	addwf	Lcd_Write_String@a,w
   436  0370  0094               	movwf	??_Lcd_Write_String+1
   437  0371  0812               	movf	Lcd_Write_String@a+1,w
   438  0372  0093               	movwf	??_Lcd_Write_String
   439  0373  1803               	skipnc
   440  0374  0A93               	incf	??_Lcd_Write_String,f
   441  0375  1B96               	btfsc	Lcd_Write_String@i,7
   442  0376  0393               	decf	??_Lcd_Write_String,f
   443  0377  1283               	bcf	3,5	;RP0=0, select bank0
   444  0378  0813               	movf	??_Lcd_Write_String,w
   445  0379  0095               	movwf	??_Lcd_Write_String+2
   446  037A  0815               	movf	??_Lcd_Write_String+2,w
   447  037B  00CF               	movwf	79
   448  037C  0814               	movf	??_Lcd_Write_String+1,w
   449  037D  0084               	movwf	4
   450  037E  2001               	fcall	stringtab
   451  037F  22FE               	fcall	_Lcd_Write_Char
   452  0380  3001               	movlw	1
   453  0381  1283               	bcf	3,5	;RP0=0, select bank0
   454  0382  0796               	addwf	Lcd_Write_String@i,f
   455  0383  1803               	skipnc
   456  0384  0A97               	incf	Lcd_Write_String@i+1,f
   457  0385  3000               	movlw	0
   458  0386  0797               	addwf	Lcd_Write_String@i+1,f
   459  0387  2B5A               	goto	l762
   460  0388                     __end_of_Lcd_Write_String:	
   461                           
   462                           	psect	text2
   463  02FE                     __ptext2:	
   464 ;; *************** function _Lcd_Write_Char *****************
   465 ;; Defined at:
   466 ;;		line 93 in file "lcd.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  a               1    wreg     unsigned char 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  a               1    4[BANK0 ] unsigned char 
   471 ;;  y               1    3[BANK0 ] unsigned char 
   472 ;;  temp            1    2[BANK0 ] unsigned char 
   473 ;; Return value:  Size  Location     Type
   474 ;;		None               void
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0
   482 ;;      Params:         0       0
   483 ;;      Locals:         0       3
   484 ;;      Temps:          0       1
   485 ;;      Totals:         0       4
   486 ;;Total ram usage:        4 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; Hardware stack levels required when called:    1
   489 ;; This function calls:
   490 ;;		_Lcd_Port
   491 ;; This function is called by:
   492 ;;		_Lcd_Write_String
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           
   497                           ;psect for function _Lcd_Write_Char
   498  02FE                     _Lcd_Write_Char:	
   499                           
   500                           ;incstack = 0
   501                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   502                           ;Lcd_Write_Char@a stored from wreg
   503  02FE  1283               	bcf	3,5	;RP0=0, select bank0
   504  02FF  0090               	movwf	Lcd_Write_Char@a
   505                           
   506                           ;lcd.c: 95: char temp,y;
   507                           ;lcd.c: 96: temp = a&0x0F;
   508  0300  0810               	movf	Lcd_Write_Char@a,w
   509  0301  390F               	andlw	15
   510  0302  008D               	movwf	??_Lcd_Write_Char
   511  0303  080D               	movf	??_Lcd_Write_Char,w
   512  0304  008E               	movwf	Lcd_Write_Char@temp
   513                           
   514                           ;lcd.c: 97: y = a&0xF0;
   515  0305  0810               	movf	Lcd_Write_Char@a,w
   516  0306  39F0               	andlw	240
   517  0307  008D               	movwf	??_Lcd_Write_Char
   518  0308  080D               	movf	??_Lcd_Write_Char,w
   519  0309  008F               	movwf	Lcd_Write_Char@y
   520                           
   521                           ;lcd.c: 98: RB4 = 1;
   522  030A  1606               	bsf	6,4	;volatile
   523                           
   524                           ;lcd.c: 99: Lcd_Port(y>>4);
   525  030B  080F               	movf	Lcd_Write_Char@y,w
   526  030C  008D               	movwf	??_Lcd_Write_Char
   527  030D  3004               	movlw	4
   528  030E                     u175:	
   529  030E  1003               	clrc
   530  030F  0C8D               	rrf	??_Lcd_Write_Char,f
   531  0310  3EFF               	addlw	-1
   532  0311  1D03               	skipz
   533  0312  2B0E               	goto	u175
   534  0313  080D               	movf	??_Lcd_Write_Char,w
   535  0314  22E7               	fcall	_Lcd_Port
   536                           
   537                           ;lcd.c: 100: RB6 = 1;
   538  0315  1283               	bcf	3,5	;RP0=0, select bank0
   539  0316  1706               	bsf	6,6	;volatile
   540                           
   541                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
   542  0317  300D               	movlw	13
   543  0318  008D               	movwf	??_Lcd_Write_Char
   544  0319                     u257:	
   545  0319  0B8D               	decfsz	??_Lcd_Write_Char,f
   546  031A  2B19               	goto	u257
   547                           
   548                           ;lcd.c: 102: RB6 = 0;
   549  031B  1283               	bcf	3,5	;RP0=0, select bank0
   550  031C  1306               	bcf	6,6	;volatile
   551                           
   552                           ;lcd.c: 103: Lcd_Port(temp);
   553  031D  080E               	movf	Lcd_Write_Char@temp,w
   554  031E  22E7               	fcall	_Lcd_Port
   555                           
   556                           ;lcd.c: 104: RB6 = 1;
   557  031F  1283               	bcf	3,5	;RP0=0, select bank0
   558  0320  1706               	bsf	6,6	;volatile
   559                           
   560                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
   561  0321  300D               	movlw	13
   562  0322  008D               	movwf	??_Lcd_Write_Char
   563  0323                     u267:	
   564  0323  0B8D               	decfsz	??_Lcd_Write_Char,f
   565  0324  2B23               	goto	u267
   566                           
   567                           ;lcd.c: 106: RB6 = 0;
   568  0325  1283               	bcf	3,5	;RP0=0, select bank0
   569  0326  1306               	bcf	6,6	;volatile
   570  0327  0008               	return
   571  0328                     __end_of_Lcd_Write_Char:	
   572                           
   573                           	psect	text3
   574  02C0                     __ptext3:	
   575 ;; *************** function _Lcd_Shift_Right *****************
   576 ;; Defined at:
   577 ;;		line 127 in file "lcd.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;		None
   580 ;; Auto vars:     Size  Location     Type
   581 ;;		None
   582 ;; Return value:  Size  Location     Type
   583 ;;		None               void
   584 ;; Registers used:
   585 ;;		wreg, status,2, status,0, pclath, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMMON   BANK0
   591 ;;      Params:         0       0
   592 ;;      Locals:         0       0
   593 ;;      Temps:          0       0
   594 ;;      Totals:         0       0
   595 ;;Total ram usage:        0 bytes
   596 ;; Hardware stack levels used:    1
   597 ;; Hardware stack levels required when called:    2
   598 ;; This function calls:
   599 ;;		_Lcd_Cmd
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           
   606                           ;psect for function _Lcd_Shift_Right
   607  02C0                     _Lcd_Shift_Right:	
   608                           
   609                           ;lcd.c: 129: Lcd_Cmd(0x01);
   610                           
   611                           ;incstack = 0
   612                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   613  02C0  3001               	movlw	1
   614  02C1  22D4               	fcall	_Lcd_Cmd
   615                           
   616                           ;lcd.c: 130: Lcd_Cmd(0x0C);
   617  02C2  300C               	movlw	12
   618  02C3  22D4               	fcall	_Lcd_Cmd
   619  02C4  0008               	return
   620  02C5                     __end_of_Lcd_Shift_Right:	
   621                           
   622                           	psect	text4
   623  03BC                     __ptext4:	
   624 ;; *************** function _Lcd_Set_Cursor *****************
   625 ;; Defined at:
   626 ;;		line 51 in file "lcd.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  a               1    wreg     unsigned char 
   629 ;;  b               1    4[BANK0 ] unsigned char 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  a               1    7[BANK0 ] unsigned char 
   632 ;;  temp            1   10[BANK0 ] unsigned char 
   633 ;;  y               1    9[BANK0 ] unsigned char 
   634 ;;  z               1    8[BANK0 ] unsigned char 
   635 ;; Return value:  Size  Location     Type
   636 ;;		None               void
   637 ;; Registers used:
   638 ;;		wreg, status,2, status,0, pclath, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMMON   BANK0
   644 ;;      Params:         0       1
   645 ;;      Locals:         0       4
   646 ;;      Temps:          0       2
   647 ;;      Totals:         0       7
   648 ;;Total ram usage:        7 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; Hardware stack levels required when called:    2
   651 ;; This function calls:
   652 ;;		_Lcd_Cmd
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           
   659                           ;psect for function _Lcd_Set_Cursor
   660  03BC                     _Lcd_Set_Cursor:	
   661                           
   662                           ;incstack = 0
   663                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   664                           ;Lcd_Set_Cursor@a stored from wreg
   665  03BC  1283               	bcf	3,5	;RP0=0, select bank0
   666  03BD  0093               	movwf	Lcd_Set_Cursor@a
   667                           
   668                           ;lcd.c: 53: char temp,z,y;
   669                           ;lcd.c: 54: if(a == 1)
   670  03BE  0313               	decf	Lcd_Set_Cursor@a,w
   671  03BF  1D03               	btfss	3,2
   672  03C0  2BDD               	goto	l746
   673                           
   674                           ;lcd.c: 55: {
   675                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
   676  03C1  0810               	movf	Lcd_Set_Cursor@b,w
   677  03C2  3E7F               	addlw	127
   678  03C3  0091               	movwf	??_Lcd_Set_Cursor
   679  03C4  0811               	movf	??_Lcd_Set_Cursor,w
   680  03C5  0096               	movwf	Lcd_Set_Cursor@temp
   681                           
   682                           ;lcd.c: 57: z = temp>>4;
   683  03C6  0816               	movf	Lcd_Set_Cursor@temp,w
   684  03C7  0091               	movwf	??_Lcd_Set_Cursor
   685  03C8  3004               	movlw	4
   686  03C9                     u195:	
   687  03C9  1003               	clrc
   688  03CA  0C91               	rrf	??_Lcd_Set_Cursor,f
   689  03CB  3EFF               	addlw	-1
   690  03CC  1D03               	skipz
   691  03CD  2BC9               	goto	u195
   692  03CE  0811               	movf	??_Lcd_Set_Cursor,w
   693  03CF  0092               	movwf	??_Lcd_Set_Cursor+1
   694  03D0  0812               	movf	??_Lcd_Set_Cursor+1,w
   695  03D1  0094               	movwf	Lcd_Set_Cursor@z
   696                           
   697                           ;lcd.c: 58: y = temp & 0x0F;
   698  03D2  0816               	movf	Lcd_Set_Cursor@temp,w
   699  03D3  390F               	andlw	15
   700  03D4  0091               	movwf	??_Lcd_Set_Cursor
   701  03D5  0811               	movf	??_Lcd_Set_Cursor,w
   702  03D6  0095               	movwf	Lcd_Set_Cursor@y
   703                           
   704                           ;lcd.c: 59: Lcd_Cmd(z);
   705  03D7  0814               	movf	Lcd_Set_Cursor@z,w
   706  03D8  22D4               	fcall	_Lcd_Cmd
   707                           
   708                           ;lcd.c: 60: Lcd_Cmd(y);
   709  03D9  1283               	bcf	3,5	;RP0=0, select bank0
   710  03DA  0815               	movf	Lcd_Set_Cursor@y,w
   711  03DB  22D4               	fcall	_Lcd_Cmd
   712                           
   713                           ;lcd.c: 61: }
   714  03DC  0008               	return
   715  03DD                     l746:	
   716                           
   717                           ;lcd.c: 62: else if(a == 2)
   718  03DD  3002               	movlw	2
   719  03DE  1283               	bcf	3,5	;RP0=0, select bank0
   720  03DF  0613               	xorwf	Lcd_Set_Cursor@a,w
   721  03E0  1D03               	btfss	3,2
   722  03E1  0008               	return
   723                           
   724                           ;lcd.c: 63: {
   725                           ;lcd.c: 64: temp = 0xC0 + b - 1;
   726  03E2  0810               	movf	Lcd_Set_Cursor@b,w
   727  03E3  3EBF               	addlw	191
   728  03E4  0091               	movwf	??_Lcd_Set_Cursor
   729  03E5  0811               	movf	??_Lcd_Set_Cursor,w
   730  03E6  0096               	movwf	Lcd_Set_Cursor@temp
   731                           
   732                           ;lcd.c: 65: z = temp>>4;
   733  03E7  0816               	movf	Lcd_Set_Cursor@temp,w
   734  03E8  0091               	movwf	??_Lcd_Set_Cursor
   735  03E9  3004               	movlw	4
   736  03EA                     u215:	
   737  03EA  1003               	clrc
   738  03EB  0C91               	rrf	??_Lcd_Set_Cursor,f
   739  03EC  3EFF               	addlw	-1
   740  03ED  1D03               	skipz
   741  03EE  2BEA               	goto	u215
   742  03EF  0811               	movf	??_Lcd_Set_Cursor,w
   743  03F0  0092               	movwf	??_Lcd_Set_Cursor+1
   744  03F1  0812               	movf	??_Lcd_Set_Cursor+1,w
   745  03F2  0094               	movwf	Lcd_Set_Cursor@z
   746                           
   747                           ;lcd.c: 66: y = temp & 0x0F;
   748  03F3  0816               	movf	Lcd_Set_Cursor@temp,w
   749  03F4  390F               	andlw	15
   750  03F5  0091               	movwf	??_Lcd_Set_Cursor
   751  03F6  0811               	movf	??_Lcd_Set_Cursor,w
   752  03F7  0095               	movwf	Lcd_Set_Cursor@y
   753                           
   754                           ;lcd.c: 67: Lcd_Cmd(z);
   755  03F8  0814               	movf	Lcd_Set_Cursor@z,w
   756  03F9  22D4               	fcall	_Lcd_Cmd
   757                           
   758                           ;lcd.c: 68: Lcd_Cmd(y);
   759  03FA  1283               	bcf	3,5	;RP0=0, select bank0
   760  03FB  0815               	movf	Lcd_Set_Cursor@y,w
   761  03FC  22D4               	fcall	_Lcd_Cmd
   762  03FD  0008               	return
   763  03FE                     __end_of_Lcd_Set_Cursor:	
   764                           
   765                           	psect	text5
   766  0388                     __ptext5:	
   767 ;; *************** function _Lcd_Init *****************
   768 ;; Defined at:
   769 ;;		line 73 in file "lcd.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;		None               void
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, pclath, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0
   783 ;;      Params:         0       0
   784 ;;      Locals:         0       0
   785 ;;      Temps:          0       2
   786 ;;      Totals:         0       2
   787 ;;Total ram usage:        2 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    2
   790 ;; This function calls:
   791 ;;		_Lcd_Cmd
   792 ;;		_Lcd_Port
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _Lcd_Init
   800  0388                     _Lcd_Init:	
   801                           
   802                           ;lcd.c: 75: Lcd_Port(0x00);
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   806  0388  3000               	movlw	0
   807  0389  22E7               	fcall	_Lcd_Port
   808                           
   809                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
   810  038A  301A               	movlw	26
   811  038B  1283               	bcf	3,5	;RP0=0, select bank0
   812  038C  0091               	movwf	??_Lcd_Init+1
   813  038D  30F8               	movlw	248
   814  038E  0090               	movwf	??_Lcd_Init
   815  038F                     u277:	
   816  038F  0B90               	decfsz	??_Lcd_Init,f
   817  0390  2B8F               	goto	u277
   818  0391  0B91               	decfsz	??_Lcd_Init+1,f
   819  0392  2B8F               	goto	u277
   820  0393  0000               	nop
   821                           
   822                           ;lcd.c: 77: Lcd_Cmd(0x03);
   823  0394  3003               	movlw	3
   824  0395  22D4               	fcall	_Lcd_Cmd
   825                           
   826                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
   827  0396  3007               	movlw	7
   828  0397  1283               	bcf	3,5	;RP0=0, select bank0
   829  0398  0091               	movwf	??_Lcd_Init+1
   830  0399  307D               	movlw	125
   831  039A  0090               	movwf	??_Lcd_Init
   832  039B                     u287:	
   833  039B  0B90               	decfsz	??_Lcd_Init,f
   834  039C  2B9B               	goto	u287
   835  039D  0B91               	decfsz	??_Lcd_Init+1,f
   836  039E  2B9B               	goto	u287
   837                           
   838                           ;lcd.c: 79: Lcd_Cmd(0x03);
   839  039F  3003               	movlw	3
   840  03A0  22D4               	fcall	_Lcd_Cmd
   841                           
   842                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
   843  03A1  300F               	movlw	15
   844  03A2  1283               	bcf	3,5	;RP0=0, select bank0
   845  03A3  0091               	movwf	??_Lcd_Init+1
   846  03A4  3047               	movlw	71
   847  03A5  0090               	movwf	??_Lcd_Init
   848  03A6                     u297:	
   849  03A6  0B90               	decfsz	??_Lcd_Init,f
   850  03A7  2BA6               	goto	u297
   851  03A8  0B91               	decfsz	??_Lcd_Init+1,f
   852  03A9  2BA6               	goto	u297
   853  03AA  2BAB               	nop2
   854                           
   855                           ;lcd.c: 81: Lcd_Cmd(0x03);
   856  03AB  3003               	movlw	3
   857  03AC  22D4               	fcall	_Lcd_Cmd
   858                           
   859                           ;lcd.c: 83: Lcd_Cmd(0x02);
   860  03AD  3002               	movlw	2
   861  03AE  22D4               	fcall	_Lcd_Cmd
   862                           
   863                           ;lcd.c: 84: Lcd_Cmd(0x02);
   864  03AF  3002               	movlw	2
   865  03B0  22D4               	fcall	_Lcd_Cmd
   866                           
   867                           ;lcd.c: 85: Lcd_Cmd(0x08);
   868  03B1  3008               	movlw	8
   869  03B2  22D4               	fcall	_Lcd_Cmd
   870                           
   871                           ;lcd.c: 86: Lcd_Cmd(0x00);
   872  03B3  3000               	movlw	0
   873  03B4  22D4               	fcall	_Lcd_Cmd
   874                           
   875                           ;lcd.c: 87: Lcd_Cmd(0x0C);
   876  03B5  300C               	movlw	12
   877  03B6  22D4               	fcall	_Lcd_Cmd
   878                           
   879                           ;lcd.c: 88: Lcd_Cmd(0x00);
   880  03B7  3000               	movlw	0
   881  03B8  22D4               	fcall	_Lcd_Cmd
   882                           
   883                           ;lcd.c: 89: Lcd_Cmd(0x06);
   884  03B9  3006               	movlw	6
   885  03BA  22D4               	fcall	_Lcd_Cmd
   886  03BB  0008               	return
   887  03BC                     __end_of_Lcd_Init:	
   888                           
   889                           	psect	text6
   890  02C5                     __ptext6:	
   891 ;; *************** function _Lcd_Clear *****************
   892 ;; Defined at:
   893 ;;		line 43 in file "lcd.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;		None               void
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0
   907 ;;      Params:         0       0
   908 ;;      Locals:         0       0
   909 ;;      Temps:          0       2
   910 ;;      Totals:         0       2
   911 ;;Total ram usage:        2 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    2
   914 ;; This function calls:
   915 ;;		_Lcd_Cmd
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           
   922                           ;psect for function _Lcd_Clear
   923  02C5                     _Lcd_Clear:	
   924                           
   925                           ;lcd.c: 45: Lcd_Cmd(0x00);
   926                           
   927                           ;incstack = 0
   928                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
   929  02C5  3000               	movlw	0
   930  02C6  22D4               	fcall	_Lcd_Cmd
   931                           
   932                           ;lcd.c: 46: Lcd_Cmd(0x01);
   933  02C7  3001               	movlw	1
   934  02C8  22D4               	fcall	_Lcd_Cmd
   935                           
   936                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
   937  02C9  3003               	movlw	3
   938  02CA  1283               	bcf	3,5	;RP0=0, select bank0
   939  02CB  0091               	movwf	??_Lcd_Clear+1
   940  02CC  3097               	movlw	151
   941  02CD  0090               	movwf	??_Lcd_Clear
   942  02CE                     u307:	
   943  02CE  0B90               	decfsz	??_Lcd_Clear,f
   944  02CF  2ACE               	goto	u307
   945  02D0  0B91               	decfsz	??_Lcd_Clear+1,f
   946  02D1  2ACE               	goto	u307
   947  02D2  2AD3               	nop2
   948  02D3  0008               	return
   949  02D4                     __end_of_Lcd_Clear:	
   950                           
   951                           	psect	text7
   952  02D4                     __ptext7:	
   953 ;; *************** function _Lcd_Cmd *****************
   954 ;; Defined at:
   955 ;;		line 30 in file "lcd.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;  a               1    wreg     unsigned char 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  a               1    3[BANK0 ] unsigned char 
   960 ;; Return value:  Size  Location     Type
   961 ;;		None               void
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0, pclath, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMMON   BANK0
   969 ;;      Params:         0       0
   970 ;;      Locals:         0       1
   971 ;;      Temps:          0       2
   972 ;;      Totals:         0       3
   973 ;;Total ram usage:        3 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    1
   976 ;; This function calls:
   977 ;;		_Lcd_Port
   978 ;; This function is called by:
   979 ;;		_Lcd_Clear
   980 ;;		_Lcd_Set_Cursor
   981 ;;		_Lcd_Init
   982 ;;		_Lcd_Shift_Right
   983 ;;		_Lcd_Shift_Left
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _Lcd_Cmd
   989  02D4                     _Lcd_Cmd:	
   990                           
   991                           ;incstack = 0
   992                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
   993                           ;Lcd_Cmd@a stored from wreg
   994  02D4  1283               	bcf	3,5	;RP0=0, select bank0
   995  02D5  008F               	movwf	Lcd_Cmd@a
   996                           
   997                           ;lcd.c: 33: RB4 = 0;
   998  02D6  1206               	bcf	6,4	;volatile
   999                           
  1000                           ;lcd.c: 34: Lcd_Port(a);
  1001  02D7  080F               	movf	Lcd_Cmd@a,w
  1002  02D8  22E7               	fcall	_Lcd_Port
  1003                           
  1004                           ;lcd.c: 37: RB6 = 1;
  1005  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1006  02DA  1706               	bsf	6,6	;volatile
  1007                           
  1008                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
  1009  02DB  3006               	movlw	6
  1010  02DC  008E               	movwf	??_Lcd_Cmd+1
  1011  02DD  3030               	movlw	48
  1012  02DE  008D               	movwf	??_Lcd_Cmd
  1013  02DF                     u317:	
  1014  02DF  0B8D               	decfsz	??_Lcd_Cmd,f
  1015  02E0  2ADF               	goto	u317
  1016  02E1  0B8E               	decfsz	??_Lcd_Cmd+1,f
  1017  02E2  2ADF               	goto	u317
  1018  02E3  0000               	nop
  1019                           
  1020                           ;lcd.c: 39: RB6 = 0;
  1021  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1022  02E5  1306               	bcf	6,6	;volatile
  1023  02E6  0008               	return
  1024  02E7                     __end_of_Lcd_Cmd:	
  1025                           
  1026                           	psect	text8
  1027  02E7                     __ptext8:	
  1028 ;; *************** function _Lcd_Port *****************
  1029 ;; Defined at:
  1030 ;;		line 6 in file "lcd.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  a               1    wreg     unsigned char 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  a               1    0[BANK0 ] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;		None               void
  1037 ;; Registers used:
  1038 ;;		wreg
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMMON   BANK0
  1044 ;;      Params:         0       0
  1045 ;;      Locals:         0       1
  1046 ;;      Temps:          0       0
  1047 ;;      Totals:         0       1
  1048 ;;Total ram usage:        1 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; This function calls:
  1051 ;;		Nothing
  1052 ;; This function is called by:
  1053 ;;		_Lcd_Cmd
  1054 ;;		_Lcd_Init
  1055 ;;		_Lcd_Write_Char
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _Lcd_Port
  1061  02E7                     _Lcd_Port:	
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in _Lcd_Port: [wreg]
  1065                           ;Lcd_Port@a stored from wreg
  1066  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1067  02E8  008C               	movwf	Lcd_Port@a
  1068                           
  1069                           ;lcd.c: 8: if(a & 1)
  1070  02E9  1C0C               	btfss	Lcd_Port@a,0
  1071  02EA  2AED               	goto	l41
  1072                           
  1073                           ;lcd.c: 9: RB0 = 1;
  1074  02EB  1406               	bsf	6,0	;volatile
  1075  02EC  2AEE               	goto	l42
  1076  02ED                     l41:	
  1077                           
  1078                           ;lcd.c: 10: else
  1079                           ;lcd.c: 11: RB0 = 0;
  1080  02ED  1006               	bcf	6,0	;volatile
  1081  02EE                     l42:	
  1082                           
  1083                           ;lcd.c: 13: if(a & 2)
  1084  02EE  1C8C               	btfss	Lcd_Port@a,1
  1085  02EF  2AF2               	goto	l43
  1086                           
  1087                           ;lcd.c: 14: RB1 = 1;
  1088  02F0  1486               	bsf	6,1	;volatile
  1089  02F1  2AF3               	goto	l44
  1090  02F2                     l43:	
  1091                           
  1092                           ;lcd.c: 15: else
  1093                           ;lcd.c: 16: RB1 = 0;
  1094  02F2  1086               	bcf	6,1	;volatile
  1095  02F3                     l44:	
  1096                           
  1097                           ;lcd.c: 18: if(a & 4)
  1098  02F3  1D0C               	btfss	Lcd_Port@a,2
  1099  02F4  2AF7               	goto	l45
  1100                           
  1101                           ;lcd.c: 19: RB2 = 1;
  1102  02F5  1506               	bsf	6,2	;volatile
  1103  02F6  2AF8               	goto	l46
  1104  02F7                     l45:	
  1105                           
  1106                           ;lcd.c: 20: else
  1107                           ;lcd.c: 21: RB2 = 0;
  1108  02F7  1106               	bcf	6,2	;volatile
  1109  02F8                     l46:	
  1110                           
  1111                           ;lcd.c: 23: if(a & 8)
  1112  02F8  1D8C               	btfss	Lcd_Port@a,3
  1113  02F9  2AFC               	goto	l47
  1114                           
  1115                           ;lcd.c: 24: RB3 = 1;
  1116  02FA  1586               	bsf	6,3	;volatile
  1117  02FB  0008               	return
  1118  02FC                     l47:	
  1119                           
  1120                           ;lcd.c: 25: else
  1121                           ;lcd.c: 26: RB3 = 0;
  1122  02FC  1186               	bcf	6,3	;volatile
  1123  02FD  0008               	return
  1124  02FE                     __end_of_Lcd_Port:	
  1125  004E                     btemp	set	78	;btemp
  1126  004E                     wtemp	set	78
  1127  004E                     wtemp0	set	78
  1128  0050                     wtemp1	set	80
  1129  0052                     wtemp2	set	82
  1130  0054                     wtemp3	set	84
  1131  0056                     wtemp4	set	86
  1132  0058                     wtemp5	set	88
  1133  004F                     wtemp6	set	79
  1134  004E                     ttemp	set	78
  1135  004E                     ttemp0	set	78
  1136  0051                     ttemp1	set	81
  1137  0054                     ttemp2	set	84
  1138  0057                     ttemp3	set	87
  1139  004F                     ttemp4	set	79
  1140  004E                     ltemp	set	78
  1141  004E                     ltemp0	set	78
  1142  0052                     ltemp1	set	82
  1143  0056                     ltemp2	set	86
  1144  0050                     ltemp3	set	80


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     15      15

Pointer List with Targets:

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_2(CODE[5]), STR_1(CODE[8]), 

    main@end	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    main@start	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1324
                                             12 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                    _Lcd_Shift_Right
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     427
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     433
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      F       F       3       22.7%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Apr 11 17:04:00 2016

                        pc 0002                __CFG_CP$OFF 0000                         l41 02ED  
                       l42 02EE                         l43 02F2                         l44 02F3  
                       l45 02F7                         l46 02F8                         l47 02FC  
                       fsr 0004                        l746 03DD                        l762 035A  
                      l778 0338                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        _RB6 0036                        u215 03EA  
                      u307 02CE                        u317 02DF                        u175 030E  
                      u257 0319                        u195 03C9                        u267 0323  
                      u277 038F                        u287 039B                        u297 03A6  
                      fsr0 0004                        indf 0000               __CFG_FOSC$XT 0000  
                     STR_1 0011                       STR_2 0019          ?_Lcd_Write_String 0011  
                     _main 0328                       btemp 004E                       ltemp 004E  
                     start 0000                       ttemp 004E         ??_Lcd_Write_String 0013  
                     wtemp 004E            __end_of_Lcd_Cmd 02E7                      ?_main 000C  
            __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 0042                      _TRISA 0085  
                    _TRISB 0086              __CFG_PWRTE$ON 0000                      pclath 000A  
                    ltemp0 004E                      ltemp1 0052                      ltemp2 0056  
                    ltemp3 0050                      ttemp0 004E                      ttemp1 0051  
                    ttemp2 0054                      ttemp3 0057                      ttemp4 004F  
                    status 0003                      wtemp0 004E                      wtemp1 0050  
                    wtemp2 0052                      wtemp3 0054                      wtemp4 0056  
                    wtemp5 0058                      wtemp6 004F           __end_of_Lcd_Init 03BC  
         __end_of_Lcd_Port 02FE            __initialization 03FE               __end_of_main 0357  
                   ??_main 0018         __size_of_Lcd_Clear 000F                  ??_Lcd_Cmd 000D  
  __size_of_Lcd_Write_Char 002A   __size_of_Lcd_Shift_Right 0005            Lcd_Set_Cursor@a 0013  
          Lcd_Set_Cursor@b 0010            Lcd_Set_Cursor@y 0015            Lcd_Set_Cursor@z 0014  
  __end_of__initialization 03FE          __end_of_Lcd_Clear 02D4             __pcstackCOMMON 0000  
           _Lcd_Set_Cursor 03BC                  ?_Lcd_Init 000C                  ?_Lcd_Port 000C  
               __pmaintext 0328  __size_of_Lcd_Write_String 0031     __end_of_Lcd_Set_Cursor 03FE  
        ??_Lcd_Shift_Right 0000                 ??_Lcd_Init 0010                 ??_Lcd_Port 0000  
               __stringtab 0001             _Lcd_Write_Char 02FE                    _Lcd_Cmd 02D4  
          ?_Lcd_Set_Cursor 0010                    __ptext1 0357                    __ptext2 02FE  
                  __ptext3 02C0                    __ptext4 03BC                    __ptext5 0388  
                  __ptext6 02C5                    __ptext7 02D4                    __ptext8 02E7  
                  main@end 001A     __end_of_Lcd_Write_Char 0328       end_of_initialization 03FE  
                Lcd_Port@a 000C            ?_Lcd_Write_Char 000C          Lcd_Write_String@a 0011  
        Lcd_Write_String@i 0016                  _Lcd_Clear 02C5           _Lcd_Write_String 0357  
      start_initialization 03FE          __size_of_Lcd_Init 0034          __size_of_Lcd_Port 0017  
               ?_Lcd_Clear 000C            _Lcd_Shift_Right 02C0            Lcd_Write_Char@a 0010  
          Lcd_Write_Char@y 000F                  ___latbits 0000              __pcstackBANK0 000C  
                 ?_Lcd_Cmd 000C           ??_Lcd_Set_Cursor 0011                  __pstrings 0001  
  __end_of_Lcd_Shift_Right 02C5                   Lcd_Cmd@a 000F                ??_Lcd_Clear 0010  
              __stringbase 0010           ??_Lcd_Write_Char 000D                  main@start 0019  
                 _Lcd_Init 0388                   _Lcd_Port 02E7   __end_of_Lcd_Write_String 0388  
         __size_of_Lcd_Cmd 0013         __end_of__stringtab 0011              __size_of_main 002F  
         ?_Lcd_Shift_Right 000C         Lcd_Write_Char@temp 000E                  stringcode 000B  
       Lcd_Set_Cursor@temp 0016                   stringdir 000B                   stringtab 0001  
